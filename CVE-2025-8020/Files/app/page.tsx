"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { Shield, Flag, AlertTriangle, Code } from "lucide-react"

export default function SSRFBypassCTF() {
  const [url, setUrl] = useState("")
  const [result, setResult] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")

  const handleFetch = async () => {
    if (!url) return

    setLoading(true)
    setError("")
    setResult("")

    try {
      const response = await fetch("/api/fetch-url", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ url }),
      })

      const data = await response.json()

      if (!response.ok) {
        setError(data.error || "An error occurred")
      } else {
        const formattedResult = `Status: ${data.status}
Target: ${data.target}
Vulnerability: ${data.vulnerability}

Result:
${data.result}

Explanation: ${data.explanation}`

        setResult(formattedResult)
      }
    } catch (err) {
      setError("Network error occurred")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center space-y-4 py-8">
          <div className="flex items-center justify-center gap-2">
            <Shield className="h-8 w-8 text-purple-400" />
            <h1 className="text-4xl font-bold text-white">SSRF Bypass</h1>
            <Flag className="h-8 w-8 text-yellow-400" />
          </div>
          <p className="text-xl text-gray-300">
            Exploit the <code className="bg-gray-800 px-2 py-1 rounded">private-ip</code> package vulnerability
          </p>
          <Badge variant="destructive" className="text-sm">
            <AlertTriangle className="h-4 w-4 mr-1" />
            CVE-2025-8020 - private-ip package SSRF
          </Badge>
        </div>

        {/* URL Fetcher Interface */}
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">Network Connection Tester</CardTitle>
            <CardDescription className="text-gray-300">
              Enter a hostname:port to test network connectivity (protected by private-ip validation)
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex gap-2">
              <Input
                placeholder="hostname:ip"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="bg-gray-700 border-gray-600 text-white placeholder-gray-400"
                onKeyPress={(e) => e.key === "Enter" && handleFetch()}
              />
              <Button onClick={handleFetch} disabled={loading || !url} className="bg-purple-600 hover:bg-purple-700">
                {loading ? "Fetching..." : "Fetch URL"}
              </Button>
            </div>

            {error && (
              <Alert className="border-red-500 bg-red-950">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription className="text-red-200">{error}</AlertDescription>
              </Alert>
            )}

            {result && (
              <div className="bg-gray-900 p-4 rounded-lg">
                <h3 className="text-white font-semibold mb-2">Response:</h3>
                <pre className="text-green-400 text-sm whitespace-pre-wrap overflow-x-auto">{result}</pre>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Footer */}
        <div className="text-center text-gray-400 text-sm py-4">
          <p>Challenge based on CVE research by Liran Tal</p>
          <p>Educational purposes only - Do not use for malicious activities</p>
        </div>
      </div>
    </div>
  )
}
