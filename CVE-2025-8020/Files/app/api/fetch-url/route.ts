import { type NextRequest, NextResponse } from "next/server"
import is_ip_private from "private-ip"
import { exec } from "child_process"

export async function POST(request: NextRequest) {
  try {
    const { url } = await request.json()

    if (!url) {
      return NextResponse.json({ error: "URL is required" }, { status: 400 })
    }

    // Extract hostname and port (default to 80 if not specified)
    const [hostname, port = "80"] = url.split(":")

    if (is_ip_private(hostname)) {
      return NextResponse.json({ error: `Access denied: ${hostname} is private` }, { status: 403 })
    }

    const timeoutSeconds = 5
    let netcatCommand: string

    if (process.platform === "win32") {
      // Windows version (using PowerShell's native timeout)
      netcatCommand = `powershell -command "$job = Start-Job -ScriptBlock { echo "Ping" | ncat -u ${hostname} ${port} }; if (Wait-Job $job -Timeout ${timeoutSeconds}) { Receive-Job $job } else { Stop-Job $job; 'Timeout reached' }"`
    } else {
      // Linux/Mac version
      netcatCommand = `timeout ${timeoutSeconds}s echo "Ping" | nc -u ${hostname} ${port}`
    }

    const result = await new Promise<string>((resolve) => {
      exec(netcatCommand, (error, stdout, stderr) => {
        if (error) {
          resolve(
            `Connection attempt to ${hostname}:${port} failed. This could indicate:\n` +
              `1. The port is not open\n` +
              `2. The multicast address has no listeners\n` +
              `3. Network restrictions\n\n` +
              `Technical details: ${stderr || error.message}`,
          )
        } else {
          resolve(`Successfully connected to ${hostname}:${port}\n${stdout}`)
        }
      })
    })

    return NextResponse.json({
      status: "SSRF Attempt Result",
      target: `${hostname}:${port}`,
      result: result,
      vulnerability: "Restriction Bypassed",
      explanation:
        "Flag:{CVE-2025-8020}",
    })
  } catch (error) {
    return NextResponse.json(
      { error: `Server error: ${error instanceof Error ? error.message : String(error)}` },
      { status: 500 },
    )
  }
}
